// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/o2geosocial.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// cpp_are_possible_ancestors
std::vector<int> cpp_are_possible_ancestors(Rcpp::IntegerVector t_inf, Rcpp::IntegerVector alpha, Rcpp::StringVector genotype, Rcpp::StringVector gen_tree, Rcpp::IntegerVector cluster, size_t i);
static SEXP _o2geosocial_cpp_are_possible_ancestors_try(SEXP t_infSEXP, SEXP alphaSEXP, SEXP genotypeSEXP, SEXP gen_treeSEXP, SEXP clusterSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type t_inf(t_infSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type genotype(genotypeSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type gen_tree(gen_treeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cluster(clusterSEXP);
    Rcpp::traits::input_parameter< size_t >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_are_possible_ancestors(t_inf, alpha, genotype, gen_tree, cluster, i));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _o2geosocial_cpp_are_possible_ancestors(SEXP t_infSEXP, SEXP alphaSEXP, SEXP genotypeSEXP, SEXP gen_treeSEXP, SEXP clusterSEXP, SEXP iSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_o2geosocial_cpp_are_possible_ancestors_try(t_infSEXP, alphaSEXP, genotypeSEXP, gen_treeSEXP, clusterSEXP, iSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_log_like_s
Rcpp::List cpp_log_like_s(Rcpp::NumericVector population, Rcpp::NumericMatrix distance, double a, double b, Rcpp::String spatial);
static SEXP _o2geosocial_cpp_log_like_s_try(SEXP populationSEXP, SEXP distanceSEXP, SEXP aSEXP, SEXP bSEXP, SEXP spatialSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type population(populationSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type distance(distanceSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type spatial(spatialSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_log_like_s(population, distance, a, b, spatial));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _o2geosocial_cpp_log_like_s(SEXP populationSEXP, SEXP distanceSEXP, SEXP aSEXP, SEXP bSEXP, SEXP spatialSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_o2geosocial_cpp_log_like_s_try(populationSEXP, distanceSEXP, aSEXP, bSEXP, spatialSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_log_like
Rcpp::List cpp_log_like(Rcpp::NumericVector population, Rcpp::NumericMatrix distance, Rcpp::NumericMatrix ances, double a, double b, int max_kappa, double gamma, Rcpp::String spatial, int nb_cases);
static SEXP _o2geosocial_cpp_log_like_try(SEXP populationSEXP, SEXP distanceSEXP, SEXP ancesSEXP, SEXP aSEXP, SEXP bSEXP, SEXP max_kappaSEXP, SEXP gammaSEXP, SEXP spatialSEXP, SEXP nb_casesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type population(populationSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type distance(distanceSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type ances(ancesSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type max_kappa(max_kappaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type spatial(spatialSEXP);
    Rcpp::traits::input_parameter< int >::type nb_cases(nb_casesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_log_like(population, distance, ances, a, b, max_kappa, gamma, spatial, nb_cases));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _o2geosocial_cpp_log_like(SEXP populationSEXP, SEXP distanceSEXP, SEXP ancesSEXP, SEXP aSEXP, SEXP bSEXP, SEXP max_kappaSEXP, SEXP gammaSEXP, SEXP spatialSEXP, SEXP nb_casesSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_o2geosocial_cpp_log_like_try(populationSEXP, distanceSEXP, ancesSEXP, aSEXP, bSEXP, max_kappaSEXP, gammaSEXP, spatialSEXP, nb_casesSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_find_descendents
Rcpp::IntegerVector cpp_find_descendents(Rcpp::IntegerVector alpha, Rcpp::IntegerVector cluster, int i);
static SEXP _o2geosocial_cpp_find_descendents_try(SEXP alphaSEXP, SEXP clusterSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cluster(clusterSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_find_descendents(alpha, cluster, i));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _o2geosocial_cpp_find_descendents(SEXP alphaSEXP, SEXP clusterSEXP, SEXP iSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_o2geosocial_cpp_find_descendents_try(alphaSEXP, clusterSEXP, iSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_find_all_descendents
std::vector<int> cpp_find_all_descendents(Rcpp::IntegerVector alpha, Rcpp::IntegerVector t_inf, Rcpp::IntegerVector cluster, int i);
static SEXP _o2geosocial_cpp_find_all_descendents_try(SEXP alphaSEXP, SEXP t_infSEXP, SEXP clusterSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type t_inf(t_infSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cluster(clusterSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_find_all_descendents(alpha, t_inf, cluster, i));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _o2geosocial_cpp_find_all_descendents(SEXP alphaSEXP, SEXP t_infSEXP, SEXP clusterSEXP, SEXP iSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_o2geosocial_cpp_find_all_descendents_try(alphaSEXP, t_infSEXP, clusterSEXP, iSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_find_all_tree
Rcpp::IntegerVector cpp_find_all_tree(Rcpp::IntegerVector alpha, Rcpp::IntegerVector t_inf, Rcpp::IntegerVector cluster, size_t i);
static SEXP _o2geosocial_cpp_find_all_tree_try(SEXP alphaSEXP, SEXP t_infSEXP, SEXP clusterSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type t_inf(t_infSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cluster(clusterSEXP);
    Rcpp::traits::input_parameter< size_t >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_find_all_tree(alpha, t_inf, cluster, i));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _o2geosocial_cpp_find_all_tree(SEXP alphaSEXP, SEXP t_infSEXP, SEXP clusterSEXP, SEXP iSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_o2geosocial_cpp_find_all_tree_try(alphaSEXP, t_infSEXP, clusterSEXP, iSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_gen_tree
Rcpp::String cpp_gen_tree(Rcpp::IntegerVector tree, Rcpp::IntegerVector cluster, Rcpp::StringVector genotype, size_t i);
static SEXP _o2geosocial_cpp_gen_tree_try(SEXP treeSEXP, SEXP clusterSEXP, SEXP genotypeSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cluster(clusterSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type genotype(genotypeSEXP);
    Rcpp::traits::input_parameter< size_t >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_gen_tree(tree, cluster, genotype, i));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _o2geosocial_cpp_gen_tree(SEXP treeSEXP, SEXP clusterSEXP, SEXP genotypeSEXP, SEXP iSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_o2geosocial_cpp_gen_tree_try(treeSEXP, clusterSEXP, genotypeSEXP, iSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_find_local_cases
Rcpp::IntegerVector cpp_find_local_cases(Rcpp::IntegerVector alpha, Rcpp::IntegerVector cluster, int i);
static SEXP _o2geosocial_cpp_find_local_cases_try(SEXP alphaSEXP, SEXP clusterSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cluster(clusterSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_find_local_cases(alpha, cluster, i));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _o2geosocial_cpp_find_local_cases(SEXP alphaSEXP, SEXP clusterSEXP, SEXP iSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_o2geosocial_cpp_find_local_cases_try(alphaSEXP, clusterSEXP, iSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_swap_cases
Rcpp::List cpp_swap_cases(Rcpp::List param, Rcpp::IntegerVector cluster, int i);
static SEXP _o2geosocial_cpp_swap_cases_try(SEXP paramSEXP, SEXP clusterSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cluster(clusterSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_swap_cases(param, cluster, i));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _o2geosocial_cpp_swap_cases(SEXP paramSEXP, SEXP clusterSEXP, SEXP iSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_o2geosocial_cpp_swap_cases_try(paramSEXP, clusterSEXP, iSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_ll_timing_infections
double cpp_ll_timing_infections(Rcpp::List data, Rcpp::List param, SEXP i, Rcpp::RObject custom_function);
static SEXP _o2geosocial_cpp_ll_timing_infections_try(SEXP dataSEXP, SEXP paramSEXP, SEXP iSEXP, SEXP custom_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< SEXP >::type i(iSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_function(custom_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ll_timing_infections(data, param, i, custom_function));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _o2geosocial_cpp_ll_timing_infections(SEXP dataSEXP, SEXP paramSEXP, SEXP iSEXP, SEXP custom_functionSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_o2geosocial_cpp_ll_timing_infections_try(dataSEXP, paramSEXP, iSEXP, custom_functionSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_ll_timing_sampling
double cpp_ll_timing_sampling(Rcpp::List data, Rcpp::List param, SEXP i, Rcpp::RObject custom_function);
static SEXP _o2geosocial_cpp_ll_timing_sampling_try(SEXP dataSEXP, SEXP paramSEXP, SEXP iSEXP, SEXP custom_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< SEXP >::type i(iSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_function(custom_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ll_timing_sampling(data, param, i, custom_function));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _o2geosocial_cpp_ll_timing_sampling(SEXP dataSEXP, SEXP paramSEXP, SEXP iSEXP, SEXP custom_functionSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_o2geosocial_cpp_ll_timing_sampling_try(dataSEXP, paramSEXP, iSEXP, custom_functionSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_ll_space
double cpp_ll_space(Rcpp::List data, Rcpp::List config, Rcpp::List param, SEXP i, Rcpp::RObject custom_function);
static SEXP _o2geosocial_cpp_ll_space_try(SEXP dataSEXP, SEXP configSEXP, SEXP paramSEXP, SEXP iSEXP, SEXP custom_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< SEXP >::type i(iSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_function(custom_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ll_space(data, config, param, i, custom_function));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _o2geosocial_cpp_ll_space(SEXP dataSEXP, SEXP configSEXP, SEXP paramSEXP, SEXP iSEXP, SEXP custom_functionSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_o2geosocial_cpp_ll_space_try(dataSEXP, configSEXP, paramSEXP, iSEXP, custom_functionSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_ll_age
double cpp_ll_age(Rcpp::List data, Rcpp::List param, SEXP i, Rcpp::RObject custom_function);
static SEXP _o2geosocial_cpp_ll_age_try(SEXP dataSEXP, SEXP paramSEXP, SEXP iSEXP, SEXP custom_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< SEXP >::type i(iSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_function(custom_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ll_age(data, param, i, custom_function));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _o2geosocial_cpp_ll_age(SEXP dataSEXP, SEXP paramSEXP, SEXP iSEXP, SEXP custom_functionSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_o2geosocial_cpp_ll_age_try(dataSEXP, paramSEXP, iSEXP, custom_functionSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_ll_reporting
double cpp_ll_reporting(Rcpp::List data, Rcpp::List param, SEXP i, Rcpp::RObject custom_function);
static SEXP _o2geosocial_cpp_ll_reporting_try(SEXP dataSEXP, SEXP paramSEXP, SEXP iSEXP, SEXP custom_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< SEXP >::type i(iSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_function(custom_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ll_reporting(data, param, i, custom_function));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _o2geosocial_cpp_ll_reporting(SEXP dataSEXP, SEXP paramSEXP, SEXP iSEXP, SEXP custom_functionSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_o2geosocial_cpp_ll_reporting_try(dataSEXP, paramSEXP, iSEXP, custom_functionSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_ll_timing
double cpp_ll_timing(Rcpp::List data, Rcpp::List param, SEXP i, Rcpp::RObject custom_functions);
static SEXP _o2geosocial_cpp_ll_timing_try(SEXP dataSEXP, SEXP paramSEXP, SEXP iSEXP, SEXP custom_functionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< SEXP >::type i(iSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_functions(custom_functionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ll_timing(data, param, i, custom_functions));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _o2geosocial_cpp_ll_timing(SEXP dataSEXP, SEXP paramSEXP, SEXP iSEXP, SEXP custom_functionsSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_o2geosocial_cpp_ll_timing_try(dataSEXP, paramSEXP, iSEXP, custom_functionsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_ll_all
double cpp_ll_all(Rcpp::List data, Rcpp::List config, Rcpp::List param, SEXP i, Rcpp::RObject custom_functions);
static SEXP _o2geosocial_cpp_ll_all_try(SEXP dataSEXP, SEXP configSEXP, SEXP paramSEXP, SEXP iSEXP, SEXP custom_functionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< SEXP >::type i(iSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_functions(custom_functionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ll_all(data, config, param, i, custom_functions));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _o2geosocial_cpp_ll_all(SEXP dataSEXP, SEXP configSEXP, SEXP paramSEXP, SEXP iSEXP, SEXP custom_functionsSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_o2geosocial_cpp_ll_all_try(dataSEXP, configSEXP, paramSEXP, iSEXP, custom_functionsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_move_a
Rcpp::List cpp_move_a(Rcpp::List param, Rcpp::List data, Rcpp::List config, Rcpp::RObject custom_ll, Rcpp::RObject custom_prior);
static SEXP _o2geosocial_cpp_move_a_try(SEXP paramSEXP, SEXP dataSEXP, SEXP configSEXP, SEXP custom_llSEXP, SEXP custom_priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_ll(custom_llSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_prior(custom_priorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_move_a(param, data, config, custom_ll, custom_prior));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _o2geosocial_cpp_move_a(SEXP paramSEXP, SEXP dataSEXP, SEXP configSEXP, SEXP custom_llSEXP, SEXP custom_priorSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_o2geosocial_cpp_move_a_try(paramSEXP, dataSEXP, configSEXP, custom_llSEXP, custom_priorSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_move_b
Rcpp::List cpp_move_b(Rcpp::List param, Rcpp::List data, Rcpp::List config, Rcpp::RObject custom_ll, Rcpp::RObject custom_prior);
static SEXP _o2geosocial_cpp_move_b_try(SEXP paramSEXP, SEXP dataSEXP, SEXP configSEXP, SEXP custom_llSEXP, SEXP custom_priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_ll(custom_llSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_prior(custom_priorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_move_b(param, data, config, custom_ll, custom_prior));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _o2geosocial_cpp_move_b(SEXP paramSEXP, SEXP dataSEXP, SEXP configSEXP, SEXP custom_llSEXP, SEXP custom_priorSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_o2geosocial_cpp_move_b_try(paramSEXP, dataSEXP, configSEXP, custom_llSEXP, custom_priorSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_move_pi
Rcpp::List cpp_move_pi(Rcpp::List param, Rcpp::List data, Rcpp::List config, Rcpp::RObject custom_ll, Rcpp::RObject custom_prior);
static SEXP _o2geosocial_cpp_move_pi_try(SEXP paramSEXP, SEXP dataSEXP, SEXP configSEXP, SEXP custom_llSEXP, SEXP custom_priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_ll(custom_llSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_prior(custom_priorSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_move_pi(param, data, config, custom_ll, custom_prior));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _o2geosocial_cpp_move_pi(SEXP paramSEXP, SEXP dataSEXP, SEXP configSEXP, SEXP custom_llSEXP, SEXP custom_priorSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_o2geosocial_cpp_move_pi_try(paramSEXP, dataSEXP, configSEXP, custom_llSEXP, custom_priorSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_move_t_inf
Rcpp::List cpp_move_t_inf(Rcpp::List param, Rcpp::List data, Rcpp::RObject list_custom_ll);
static SEXP _o2geosocial_cpp_move_t_inf_try(SEXP paramSEXP, SEXP dataSEXP, SEXP list_custom_llSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type list_custom_ll(list_custom_llSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_move_t_inf(param, data, list_custom_ll));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _o2geosocial_cpp_move_t_inf(SEXP paramSEXP, SEXP dataSEXP, SEXP list_custom_llSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_o2geosocial_cpp_move_t_inf_try(paramSEXP, dataSEXP, list_custom_llSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_move_alpha
Rcpp::List cpp_move_alpha(Rcpp::List param, Rcpp::List data, Rcpp::List config, Rcpp::RObject list_custom_ll);
static SEXP _o2geosocial_cpp_move_alpha_try(SEXP paramSEXP, SEXP dataSEXP, SEXP configSEXP, SEXP list_custom_llSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type list_custom_ll(list_custom_llSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_move_alpha(param, data, config, list_custom_ll));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _o2geosocial_cpp_move_alpha(SEXP paramSEXP, SEXP dataSEXP, SEXP configSEXP, SEXP list_custom_llSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_o2geosocial_cpp_move_alpha_try(paramSEXP, dataSEXP, configSEXP, list_custom_llSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_move_ancestors
Rcpp::List cpp_move_ancestors(Rcpp::List param, Rcpp::List data, Rcpp::List config, Rcpp::RObject list_custom_ll);
static SEXP _o2geosocial_cpp_move_ancestors_try(SEXP paramSEXP, SEXP dataSEXP, SEXP configSEXP, SEXP list_custom_llSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type list_custom_ll(list_custom_llSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_move_ancestors(param, data, config, list_custom_ll));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _o2geosocial_cpp_move_ancestors(SEXP paramSEXP, SEXP dataSEXP, SEXP configSEXP, SEXP list_custom_llSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_o2geosocial_cpp_move_ancestors_try(paramSEXP, dataSEXP, configSEXP, list_custom_llSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_move_swap_cases
Rcpp::List cpp_move_swap_cases(Rcpp::List param, Rcpp::List data, Rcpp::List config, Rcpp::RObject list_custom_ll);
static SEXP _o2geosocial_cpp_move_swap_cases_try(SEXP paramSEXP, SEXP dataSEXP, SEXP configSEXP, SEXP list_custom_llSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type list_custom_ll(list_custom_llSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_move_swap_cases(param, data, config, list_custom_ll));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _o2geosocial_cpp_move_swap_cases(SEXP paramSEXP, SEXP dataSEXP, SEXP configSEXP, SEXP list_custom_llSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_o2geosocial_cpp_move_swap_cases_try(paramSEXP, dataSEXP, configSEXP, list_custom_llSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_move_kappa
Rcpp::List cpp_move_kappa(Rcpp::List param, Rcpp::List data, Rcpp::List config, Rcpp::RObject list_custom_ll);
static SEXP _o2geosocial_cpp_move_kappa_try(SEXP paramSEXP, SEXP dataSEXP, SEXP configSEXP, SEXP list_custom_llSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type list_custom_ll(list_custom_llSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_move_kappa(param, data, config, list_custom_ll));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _o2geosocial_cpp_move_kappa(SEXP paramSEXP, SEXP dataSEXP, SEXP configSEXP, SEXP list_custom_llSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_o2geosocial_cpp_move_kappa_try(paramSEXP, dataSEXP, configSEXP, list_custom_llSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_prior_pi
double cpp_prior_pi(Rcpp::List param, Rcpp::List config, Rcpp::RObject custom_function);
static SEXP _o2geosocial_cpp_prior_pi_try(SEXP paramSEXP, SEXP configSEXP, SEXP custom_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_function(custom_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_prior_pi(param, config, custom_function));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _o2geosocial_cpp_prior_pi(SEXP paramSEXP, SEXP configSEXP, SEXP custom_functionSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_o2geosocial_cpp_prior_pi_try(paramSEXP, configSEXP, custom_functionSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_prior_a
double cpp_prior_a(Rcpp::List param, Rcpp::List config, Rcpp::RObject custom_function);
static SEXP _o2geosocial_cpp_prior_a_try(SEXP paramSEXP, SEXP configSEXP, SEXP custom_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_function(custom_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_prior_a(param, config, custom_function));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _o2geosocial_cpp_prior_a(SEXP paramSEXP, SEXP configSEXP, SEXP custom_functionSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_o2geosocial_cpp_prior_a_try(paramSEXP, configSEXP, custom_functionSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_prior_b
double cpp_prior_b(Rcpp::List param, Rcpp::List config, Rcpp::RObject custom_function);
static SEXP _o2geosocial_cpp_prior_b_try(SEXP paramSEXP, SEXP configSEXP, SEXP custom_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_function(custom_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_prior_b(param, config, custom_function));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _o2geosocial_cpp_prior_b(SEXP paramSEXP, SEXP configSEXP, SEXP custom_functionSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_o2geosocial_cpp_prior_b_try(paramSEXP, configSEXP, custom_functionSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_prior_all
double cpp_prior_all(Rcpp::List param, Rcpp::List config, Rcpp::RObject custom_functions);
static SEXP _o2geosocial_cpp_prior_all_try(SEXP paramSEXP, SEXP configSEXP, SEXP custom_functionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type config(configSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type custom_functions(custom_functionsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_prior_all(param, config, custom_functions));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _o2geosocial_cpp_prior_all(SEXP paramSEXP, SEXP configSEXP, SEXP custom_functionsSEXP) {
    SEXP rcpp_result_gen;
    {
        rcpp_result_gen = PROTECT(_o2geosocial_cpp_prior_all_try(paramSEXP, configSEXP, custom_functionsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _o2geosocial_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("std::vector<int>(*cpp_are_possible_ancestors)(Rcpp::IntegerVector,Rcpp::IntegerVector,Rcpp::StringVector,Rcpp::StringVector,Rcpp::IntegerVector,size_t)");
        signatures.insert("Rcpp::List(*cpp_log_like_s)(Rcpp::NumericVector,Rcpp::NumericMatrix,double,double,Rcpp::String)");
        signatures.insert("Rcpp::List(*cpp_log_like)(Rcpp::NumericVector,Rcpp::NumericMatrix,Rcpp::NumericMatrix,double,double,int,double,Rcpp::String,int)");
        signatures.insert("Rcpp::IntegerVector(*cpp_find_descendents)(Rcpp::IntegerVector,Rcpp::IntegerVector,int)");
        signatures.insert("std::vector<int>(*cpp_find_all_descendents)(Rcpp::IntegerVector,Rcpp::IntegerVector,Rcpp::IntegerVector,int)");
        signatures.insert("Rcpp::IntegerVector(*cpp_find_all_tree)(Rcpp::IntegerVector,Rcpp::IntegerVector,Rcpp::IntegerVector,size_t)");
        signatures.insert("Rcpp::String(*cpp_gen_tree)(Rcpp::IntegerVector,Rcpp::IntegerVector,Rcpp::StringVector,size_t)");
        signatures.insert("Rcpp::IntegerVector(*cpp_find_local_cases)(Rcpp::IntegerVector,Rcpp::IntegerVector,int)");
        signatures.insert("Rcpp::List(*cpp_swap_cases)(Rcpp::List,Rcpp::IntegerVector,int)");
        signatures.insert("double(*cpp_ll_timing_infections)(Rcpp::List,Rcpp::List,SEXP,Rcpp::RObject)");
        signatures.insert("double(*cpp_ll_timing_sampling)(Rcpp::List,Rcpp::List,SEXP,Rcpp::RObject)");
        signatures.insert("double(*cpp_ll_space)(Rcpp::List,Rcpp::List,Rcpp::List,SEXP,Rcpp::RObject)");
        signatures.insert("double(*cpp_ll_age)(Rcpp::List,Rcpp::List,SEXP,Rcpp::RObject)");
        signatures.insert("double(*cpp_ll_reporting)(Rcpp::List,Rcpp::List,SEXP,Rcpp::RObject)");
        signatures.insert("double(*cpp_ll_timing)(Rcpp::List,Rcpp::List,SEXP,Rcpp::RObject)");
        signatures.insert("double(*cpp_ll_all)(Rcpp::List,Rcpp::List,Rcpp::List,SEXP,Rcpp::RObject)");
        signatures.insert("Rcpp::List(*cpp_move_a)(Rcpp::List,Rcpp::List,Rcpp::List,Rcpp::RObject,Rcpp::RObject)");
        signatures.insert("Rcpp::List(*cpp_move_b)(Rcpp::List,Rcpp::List,Rcpp::List,Rcpp::RObject,Rcpp::RObject)");
        signatures.insert("Rcpp::List(*cpp_move_pi)(Rcpp::List,Rcpp::List,Rcpp::List,Rcpp::RObject,Rcpp::RObject)");
        signatures.insert("Rcpp::List(*cpp_move_t_inf)(Rcpp::List,Rcpp::List,Rcpp::RObject)");
        signatures.insert("Rcpp::List(*cpp_move_alpha)(Rcpp::List,Rcpp::List,Rcpp::List,Rcpp::RObject)");
        signatures.insert("Rcpp::List(*cpp_move_ancestors)(Rcpp::List,Rcpp::List,Rcpp::List,Rcpp::RObject)");
        signatures.insert("Rcpp::List(*cpp_move_swap_cases)(Rcpp::List,Rcpp::List,Rcpp::List,Rcpp::RObject)");
        signatures.insert("Rcpp::List(*cpp_move_kappa)(Rcpp::List,Rcpp::List,Rcpp::List,Rcpp::RObject)");
        signatures.insert("double(*cpp_prior_pi)(Rcpp::List,Rcpp::List,Rcpp::RObject)");
        signatures.insert("double(*cpp_prior_a)(Rcpp::List,Rcpp::List,Rcpp::RObject)");
        signatures.insert("double(*cpp_prior_b)(Rcpp::List,Rcpp::List,Rcpp::RObject)");
        signatures.insert("double(*cpp_prior_all)(Rcpp::List,Rcpp::List,Rcpp::RObject)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _o2geosocial_RcppExport_registerCCallable() { 
    R_RegisterCCallable("o2geosocial", "_o2geosocial_cpp_are_possible_ancestors", (DL_FUNC)_o2geosocial_cpp_are_possible_ancestors_try);
    R_RegisterCCallable("o2geosocial", "_o2geosocial_cpp_log_like_s", (DL_FUNC)_o2geosocial_cpp_log_like_s_try);
    R_RegisterCCallable("o2geosocial", "_o2geosocial_cpp_log_like", (DL_FUNC)_o2geosocial_cpp_log_like_try);
    R_RegisterCCallable("o2geosocial", "_o2geosocial_cpp_find_descendents", (DL_FUNC)_o2geosocial_cpp_find_descendents_try);
    R_RegisterCCallable("o2geosocial", "_o2geosocial_cpp_find_all_descendents", (DL_FUNC)_o2geosocial_cpp_find_all_descendents_try);
    R_RegisterCCallable("o2geosocial", "_o2geosocial_cpp_find_all_tree", (DL_FUNC)_o2geosocial_cpp_find_all_tree_try);
    R_RegisterCCallable("o2geosocial", "_o2geosocial_cpp_gen_tree", (DL_FUNC)_o2geosocial_cpp_gen_tree_try);
    R_RegisterCCallable("o2geosocial", "_o2geosocial_cpp_find_local_cases", (DL_FUNC)_o2geosocial_cpp_find_local_cases_try);
    R_RegisterCCallable("o2geosocial", "_o2geosocial_cpp_swap_cases", (DL_FUNC)_o2geosocial_cpp_swap_cases_try);
    R_RegisterCCallable("o2geosocial", "_o2geosocial_cpp_ll_timing_infections", (DL_FUNC)_o2geosocial_cpp_ll_timing_infections_try);
    R_RegisterCCallable("o2geosocial", "_o2geosocial_cpp_ll_timing_sampling", (DL_FUNC)_o2geosocial_cpp_ll_timing_sampling_try);
    R_RegisterCCallable("o2geosocial", "_o2geosocial_cpp_ll_space", (DL_FUNC)_o2geosocial_cpp_ll_space_try);
    R_RegisterCCallable("o2geosocial", "_o2geosocial_cpp_ll_age", (DL_FUNC)_o2geosocial_cpp_ll_age_try);
    R_RegisterCCallable("o2geosocial", "_o2geosocial_cpp_ll_reporting", (DL_FUNC)_o2geosocial_cpp_ll_reporting_try);
    R_RegisterCCallable("o2geosocial", "_o2geosocial_cpp_ll_timing", (DL_FUNC)_o2geosocial_cpp_ll_timing_try);
    R_RegisterCCallable("o2geosocial", "_o2geosocial_cpp_ll_all", (DL_FUNC)_o2geosocial_cpp_ll_all_try);
    R_RegisterCCallable("o2geosocial", "_o2geosocial_cpp_move_a", (DL_FUNC)_o2geosocial_cpp_move_a_try);
    R_RegisterCCallable("o2geosocial", "_o2geosocial_cpp_move_b", (DL_FUNC)_o2geosocial_cpp_move_b_try);
    R_RegisterCCallable("o2geosocial", "_o2geosocial_cpp_move_pi", (DL_FUNC)_o2geosocial_cpp_move_pi_try);
    R_RegisterCCallable("o2geosocial", "_o2geosocial_cpp_move_t_inf", (DL_FUNC)_o2geosocial_cpp_move_t_inf_try);
    R_RegisterCCallable("o2geosocial", "_o2geosocial_cpp_move_alpha", (DL_FUNC)_o2geosocial_cpp_move_alpha_try);
    R_RegisterCCallable("o2geosocial", "_o2geosocial_cpp_move_ancestors", (DL_FUNC)_o2geosocial_cpp_move_ancestors_try);
    R_RegisterCCallable("o2geosocial", "_o2geosocial_cpp_move_swap_cases", (DL_FUNC)_o2geosocial_cpp_move_swap_cases_try);
    R_RegisterCCallable("o2geosocial", "_o2geosocial_cpp_move_kappa", (DL_FUNC)_o2geosocial_cpp_move_kappa_try);
    R_RegisterCCallable("o2geosocial", "_o2geosocial_cpp_prior_pi", (DL_FUNC)_o2geosocial_cpp_prior_pi_try);
    R_RegisterCCallable("o2geosocial", "_o2geosocial_cpp_prior_a", (DL_FUNC)_o2geosocial_cpp_prior_a_try);
    R_RegisterCCallable("o2geosocial", "_o2geosocial_cpp_prior_b", (DL_FUNC)_o2geosocial_cpp_prior_b_try);
    R_RegisterCCallable("o2geosocial", "_o2geosocial_cpp_prior_all", (DL_FUNC)_o2geosocial_cpp_prior_all_try);
    R_RegisterCCallable("o2geosocial", "_o2geosocial_RcppExport_validate", (DL_FUNC)_o2geosocial_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_o2geosocial_cpp_are_possible_ancestors", (DL_FUNC) &_o2geosocial_cpp_are_possible_ancestors, 6},
    {"_o2geosocial_cpp_log_like_s", (DL_FUNC) &_o2geosocial_cpp_log_like_s, 5},
    {"_o2geosocial_cpp_log_like", (DL_FUNC) &_o2geosocial_cpp_log_like, 9},
    {"_o2geosocial_cpp_find_descendents", (DL_FUNC) &_o2geosocial_cpp_find_descendents, 3},
    {"_o2geosocial_cpp_find_all_descendents", (DL_FUNC) &_o2geosocial_cpp_find_all_descendents, 4},
    {"_o2geosocial_cpp_find_all_tree", (DL_FUNC) &_o2geosocial_cpp_find_all_tree, 4},
    {"_o2geosocial_cpp_gen_tree", (DL_FUNC) &_o2geosocial_cpp_gen_tree, 4},
    {"_o2geosocial_cpp_find_local_cases", (DL_FUNC) &_o2geosocial_cpp_find_local_cases, 3},
    {"_o2geosocial_cpp_swap_cases", (DL_FUNC) &_o2geosocial_cpp_swap_cases, 3},
    {"_o2geosocial_cpp_ll_timing_infections", (DL_FUNC) &_o2geosocial_cpp_ll_timing_infections, 4},
    {"_o2geosocial_cpp_ll_timing_sampling", (DL_FUNC) &_o2geosocial_cpp_ll_timing_sampling, 4},
    {"_o2geosocial_cpp_ll_space", (DL_FUNC) &_o2geosocial_cpp_ll_space, 5},
    {"_o2geosocial_cpp_ll_age", (DL_FUNC) &_o2geosocial_cpp_ll_age, 4},
    {"_o2geosocial_cpp_ll_reporting", (DL_FUNC) &_o2geosocial_cpp_ll_reporting, 4},
    {"_o2geosocial_cpp_ll_timing", (DL_FUNC) &_o2geosocial_cpp_ll_timing, 4},
    {"_o2geosocial_cpp_ll_all", (DL_FUNC) &_o2geosocial_cpp_ll_all, 5},
    {"_o2geosocial_cpp_move_a", (DL_FUNC) &_o2geosocial_cpp_move_a, 5},
    {"_o2geosocial_cpp_move_b", (DL_FUNC) &_o2geosocial_cpp_move_b, 5},
    {"_o2geosocial_cpp_move_pi", (DL_FUNC) &_o2geosocial_cpp_move_pi, 5},
    {"_o2geosocial_cpp_move_t_inf", (DL_FUNC) &_o2geosocial_cpp_move_t_inf, 3},
    {"_o2geosocial_cpp_move_alpha", (DL_FUNC) &_o2geosocial_cpp_move_alpha, 4},
    {"_o2geosocial_cpp_move_ancestors", (DL_FUNC) &_o2geosocial_cpp_move_ancestors, 4},
    {"_o2geosocial_cpp_move_swap_cases", (DL_FUNC) &_o2geosocial_cpp_move_swap_cases, 4},
    {"_o2geosocial_cpp_move_kappa", (DL_FUNC) &_o2geosocial_cpp_move_kappa, 4},
    {"_o2geosocial_cpp_prior_pi", (DL_FUNC) &_o2geosocial_cpp_prior_pi, 3},
    {"_o2geosocial_cpp_prior_a", (DL_FUNC) &_o2geosocial_cpp_prior_a, 3},
    {"_o2geosocial_cpp_prior_b", (DL_FUNC) &_o2geosocial_cpp_prior_b, 3},
    {"_o2geosocial_cpp_prior_all", (DL_FUNC) &_o2geosocial_cpp_prior_all, 3},
    {"_o2geosocial_RcppExport_registerCCallable", (DL_FUNC) &_o2geosocial_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_o2geosocial(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
